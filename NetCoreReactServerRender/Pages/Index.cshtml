@page
@model NetCoreReactServerRender.Pages.Index
@addTagHelper "*, Microsoft.AspNetCore.Mvc.TagHelpers"
@addTagHelper "*, Microsoft.AspNetCore.SpaServices"
@inject Microsoft.AspNetCore.SpaServices.Prerendering.ISpaPrerenderer prerenderer


@{
    Layout = null;

    var prerenderResult = await prerenderer.RenderToString("ClientApp/dist/main-server", customDataParameter: Model.Global);
    var publicSessionJson = prerenderResult?.Globals?["global"]["publicSession"]?.ToString();
    var initialReduxStateJson = prerenderResult?.Globals?["initialReduxState"]?.ToString();
    var helmetStringsPrerender = prerenderResult?.Globals?["helmetStrings"]?.ToString();
    //var completedTasksJson = prerenderResult?.Globals?["completedTasks"]?.ToString();
    var browserClient = prerenderResult.Globals?["global"]?["browserClient"]?.ToString();
    var lang = prerenderResult.Globals?["global"]?["browserClient"]?["language"]?.ToString();
    var IsDevelopment = Environment.GetEnvironmentVariables()["ASPNETCORE_ENVIRONMENT"]?.ToString() == "Development";
}

<html lang="@Html.Raw(lang)">
<head>
    <meta charset="utf-8"/>
    @Html.Raw(helmetStringsPrerender)
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="stylesheet" href="~/dist/vendor.css" asp-append-version="true"/>
    <base href="~/"/>
    @if (!IsDevelopment)
    {
        <link rel="stylesheet" href="~/dist/site.css" asp-append-version="true"/>
    }
    <script>
        window.publicSession = @Html.Raw(string.IsNullOrEmpty(publicSessionJson) ? "null" : publicSessionJson);    
        window.initialReduxState = @Html.Raw(initialReduxStateJson);
        window.browserClient= @Html.Raw(browserClient);
    </script>
</head>
<body>
@Html.AntiForgeryToken()

<div id="react-app">
    @Html.Raw(prerenderResult?.Html)
</div>
<script>
        window.initialReduxState = @Html.Raw(initialReduxStateJson);
</script>
<script async="async" src="~/dist/bundle.js"></script>
</body>
</html>